#!/usr/bin/env python3
"""
JARVIS - Asistente Virtual con Memoria Mejorada
Este programa implementa un asistente virtual con capacidad para recordar
resultados de comandos anteriores y usar esa informaci√≥n en comandos subsecuentes.
"""

import asyncio
import json
import logging
import os
import platform
import re
import subprocess
import sys
import tempfile
import time
import traceback
from collections import deque
from typing import Any, Dict, List, Optional, Tuple, Union

import psutil
import yaml
import os.path
from dotenv import load_dotenv
from pathlib import Path

# Inicializar colorama para que los colores funcionen en Windows
from colorama import init, Fore, Style
init(autoreset=True)  # Esto arregla los colores en PowerShell

# Cargar variables de entorno desde .env
load_dotenv()

# Configuraci√≥n del logger
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Definir el sistema operativo
SISTEMA_OPERATIVO = platform.system()

# Verificar si OpenAI est√° disponible
OPENAI_DISPONIBLE = os.getenv("OPENAI_API_KEY") is not None

# Definir el n√∫mero m√°ximo de mensajes en el historial de conversaci√≥n
MAX_HISTORIAL = 10

# Definir la ruta de la configuraci√≥n por defecto
DEFAULT_CONFIG_PATH = "config.yaml"

# Intentar importar chromadb, pero no fallar si no est√° disponible
try:
    import chromadb
    from chromadb.utils import embedding_functions
    CHROMADB_DISPONIBLE = True
except ImportError:
    CHROMADB_DISPONIBLE = False
    logger.warning("ChromaDB no est√° disponible. La b√∫squeda sem√°ntica estar√° desactivada.")

# Definir la ruta de la base de datos ChromaDB
CHROMA_DB_DIR = "chroma_db"

# Plantillas de c√≥digo predefinidas
PLANTILLAS = {
    "crear_archivo": """
from pathlib import Path
import os

def crear_archivo(nombre_archivo, ubicacion="escritorio"):
    try:
        # Determinar la ubicaci√≥n
        if ubicacion.lower() == "escritorio":
            ruta_base = obtener_escritorio()
        elif ubicacion.lower() == "documentos":
            ruta_base = obtener_documentos()
        elif ubicacion.lower() == "descargas":
            ruta_base = obtener_descargas()
        else:
            ruta_base = ubicacion
            
        # Crear la ruta completa
        ruta_archivo = os.path.join(ruta_base, nombre_archivo)
        
        # Crear el archivo
        with open(ruta_archivo, 'w', encoding='utf-8') as f:
            f.write("")
            
        print(f"‚úÖ Archivo '{nombre_archivo}' creado en {ruta_base}")
        return ruta_archivo
    except Exception as e:
        print(f"‚ùå Error al crear el archivo: {e}")
        return None

# Ejecutar la funci√≥n
ruta = crear_archivo("{nombre_archivo}", "{ubicacion}")
""",
    "crear_y_abrir_archivo": """
from pathlib import Path
import os

def crear_y_abrir_archivo(nombre_archivo, ubicacion="escritorio"):
    try:
        # Determinar la ubicaci√≥n
        if ubicacion.lower() == "escritorio":
            ruta_base = obtener_escritorio()
        elif ubicacion.lower() == "documentos":
            ruta_base = obtener_documentos()
        elif ubicacion.lower() == "descargas":
            ruta_base = obtener_descargas()
        else:
            ruta_base = ubicacion
            
        # Crear la ruta completa
        ruta_archivo = os.path.join(ruta_base, nombre_archivo)
        
        # Crear el archivo
        with open(ruta_archivo, 'w', encoding='utf-8') as f:
            f.write("")
            
        print(f"‚úÖ Archivo '{nombre_archivo}' creado en {ruta_base}")
        
        # Abrir el archivo
        resultado = abrir_archivo(ruta_archivo)
        print(resultado)
        
        return ruta_archivo
    except Exception as e:
        print(f"‚ùå Error al crear o abrir el archivo: {e}")
        return None

# Ejecutar la funci√≥n
ruta = crear_y_abrir_archivo("{nombre_archivo}", "{ubicacion}")
""",
    "buscar_archivos": """
import os
import glob
from pathlib import Path

def buscar_archivos(patron, ubicacion=None):
    try:
        # Determinar la ubicaci√≥n de b√∫squeda
        if ubicacion is None or ubicacion.lower() == "actual":
            ruta_base = os.getcwd()
        elif ubicacion.lower() == "escritorio":
            ruta_base = obtener_escritorio()
        elif ubicacion.lower() == "documentos":
            ruta_base = obtener_documentos()
        elif ubicacion.lower() == "descargas":
            ruta_base = obtener_descargas()
        else:
            ruta_base = ubicacion
        
        # Construir el patr√≥n de b√∫squeda
        patron_busqueda = os.path.join(ruta_base, f"*{patron}*")
        
        # Buscar archivos
        archivos_encontrados = glob.glob(patron_busqueda)
        
        # Mostrar resultados
        if archivos_encontrados:
            print(f"üîç Se encontraron {len(archivos_encontrados)} archivos:")
            for i, archivo in enumerate(archivos_encontrados, 1):
                print(f"{i}. {archivo}")
        else:
            print(f"‚ùå No se encontraron archivos que coincidan con '{patron}' en {ruta_base}")
        
        return archivos_encontrados
    except Exception as e:
        print(f"‚ùå Error al buscar archivos: {e}")
        return []

# Ejecutar la b√∫squeda
archivos_encontrados = buscar_archivos("{patron}")
"""
}


class Timer:
    """Context manager para medir el tiempo de ejecuci√≥n."""

    def __init__(self, name: str):
        self.name = name
        self.start_time = None

    def __enter__(self):
        self.start_time = time.time()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        end_time = time.time()
        execution_time = end_time - self.start_time
        print(f"Tiempo de {self.name}: {execution_time:.4f} segundos")


class ConfigMenu:
    """
    Clase para manejar el men√∫ de configuraci√≥n del chatbot.
    """
    
    def __init__(self, config_path: str = "config.yaml"):
        """
        Inicializa el men√∫ de configuraci√≥n.
        
        Args:
            config_path: Ruta al archivo de configuraci√≥n.
        """
        self.config_path = config_path
        self.config = self.load_config()
        self.colores = {
            "titulo": Fore.CYAN + Style.BRIGHT,
            "opcion": Fore.GREEN,
            "valor": Fore.YELLOW,
            "error": Fore.RED,
            "exito": Fore.GREEN + Style.BRIGHT,
            "reset": Style.RESET_ALL,
        }
        
    def load_config(self) -> Dict[str, Any]:
        """
        Carga la configuraci√≥n desde un archivo YAML.
        
        Returns:
            Diccionario con la configuraci√≥n.
        """
        default_config = {
            "modelo_gpt": "gpt-4o",
            "max_tokens": 1000,
            "temperatura": 0.7,
            "permitir_delimitadores": False,
            "modo_interaccion": "texto",
            "vector_db": {"type": "chroma"},
            "mostrar_menu_inicio": True
        }
        
        try:
            if os.path.exists(self.config_path):
                with open(self.config_path, "r", encoding="utf-8") as f:
                    config = yaml.safe_load(f)
                
                # Asegurarse de que todas las claves necesarias est√©n presentes
                for key, value in default_config.items():
                    if key not in config:
                        config[key] = value
                
                return config
            else:
                return default_config
        except Exception as e:
            print(f"Error al cargar la configuraci√≥n: {e}")
            return default_config
    
    def save_config(self) -> bool:
        """
        Guarda la configuraci√≥n en un archivo YAML.
        
        Returns:
            True si se guard√≥ correctamente, False en caso contrario.
        """
        try:
            with open(self.config_path, "w", encoding="utf-8") as f:
                yaml.dump(self.config, f, default_flow_style=False)
            return True
        except Exception as e:
            print(f"Error al guardar la configuraci√≥n: {e}")
            return False
    
    def display_menu(self) -> None:
        """
        Muestra el men√∫ de configuraci√≥n.
        """
        print(f"\n{self.colores['titulo']}=== CONFIGURACI√ìN DE JARVIS ==={self.colores['reset']}")
        print(f"{self.colores['opcion']}1. Modelo GPT:{self.colores['reset']} {self.colores['valor']}{self.config['modelo_gpt']}{self.colores['reset']}")
        print(f"{self.colores['opcion']}2. Temperatura:{self.colores['reset']} {self.colores['valor']}{self.config['temperatura']}{self.colores['reset']}")
        print(f"{self.colores['opcion']}3. M√°ximo de tokens:{self.colores['reset']} {self.colores['valor']}{self.config['max_tokens']}{self.colores['reset']}")
        print(f"{self.colores['opcion']}4. Permitir delimitadores de c√≥digo:{self.colores['reset']} {self.colores['valor']}{self.config['permitir_delimitadores']}{self.colores['reset']}")
        print(f"{self.colores['opcion']}5. Modo de interacci√≥n:{self.colores['reset']} {self.colores['valor']}{self.config['modo_interaccion']}{self.colores['reset']}")
        print(f"{self.colores['opcion']}6. Mostrar este men√∫ al inicio:{self.colores['reset']} {self.colores['valor']}{self.config['mostrar_menu_inicio']}{self.colores['reset']}")
        print(f"{self.colores['opcion']}7. Guardar y salir{self.colores['reset']}")
        print(f"{self.colores['opcion']}8. Salir sin guardar{self.colores['reset']}")
    
    def run(self) -> Dict[str, Any]:
        """
        Ejecuta el men√∫ de configuraci√≥n.
        
        Returns:
            Diccionario con la configuraci√≥n actualizada.
        """
        while True:
            self.display_menu()
            
            try:
                choice = input(f"\n{self.colores['opcion']}Selecciona una opci√≥n (1-8): {self.colores['reset']}")
                
                if choice == "1":
                    models = ["gpt-4o", "gpt-4-turbo", "gpt-4", "gpt-3.5-turbo"]
                    print(f"\n{self.colores['titulo']}Modelos disponibles:{self.colores['reset']}")
                    for i, model in enumerate(models, 1):
                        print(f"{self.colores['opcion']}{i}. {model}{self.colores['reset']}")
                    
                    model_choice = input(f"\n{self.colores['opcion']}Selecciona un modelo (1-{len(models)}): {self.colores['reset']}")
                    try:
                        model_index = int(model_choice) - 1
                        if 0 <= model_index < len(models):
                            self.config["modelo_gpt"] = models[model_index]
                            print(f"{self.colores['exito']}Modelo actualizado a {models[model_index]}{self.colores['reset']}")
                        else:
                            print(f"{self.colores['error']}Opci√≥n inv√°lida{self.colores['reset']}")
                    except ValueError:
                        print(f"{self.colores['error']}Por favor, introduce un n√∫mero{self.colores['reset']}")
                
                elif choice == "2":
                    temp = input(f"{self.colores['opcion']}Introduce la temperatura (0.0-1.0): {self.colores['reset']}")
                    try:
                        temp_value = float(temp)
                        if 0.0 <= temp_value <= 1.0:
                            self.config["temperatura"] = temp_value
                            print(f"{self.colores['exito']}Temperatura actualizada a {temp_value}{self.colores['reset']}")
                        else:
                            print(f"{self.colores['error']}La temperatura debe estar entre 0.0 y 1.0{self.colores['reset']}")
                    except ValueError:
                        print(f"{self.colores['error']}Por favor, introduce un n√∫mero v√°lido{self.colores['reset']}")
                
                elif choice == "3":
                    tokens = input(f"{self.colores['opcion']}Introduce el m√°ximo de tokens (100-4000): {self.colores['reset']}")
                    try:
                        tokens_value = int(tokens)
                        if 100 <= tokens_value <= 4000:
                            self.config["max_tokens"] = tokens_value
                            print(f"{self.colores['exito']}M√°ximo de tokens actualizado a {tokens_value}{self.colores['reset']}")
                        else:
                            print(f"{self.colores['error']}El m√°ximo de tokens debe estar entre 100 y 4000{self.colores['reset']}")
                    except ValueError:
                        print(f"{self.colores['error']}Por favor, introduce un n√∫mero entero{self.colores['reset']}")
                
                elif choice == "4":
                    delimiters = input(f"{self.colores['opcion']}¬øPermitir delimitadores de c√≥digo? (s/n): {self.colores['reset']}")
                    if delimiters.lower() in ["s", "si", "s√≠", "y", "yes"]:
                        self.config["permitir_delimitadores"] = True
                        print(f"{self.colores['exito']}Delimitadores de c√≥digo permitidos{self.colores['reset']}")
                    elif delimiters.lower() in ["n", "no"]:
                        self.config["permitir_delimitadores"] = False
                        print(f"{self.colores['exito']}Delimitadores de c√≥digo no permitidos{self.colores['reset']}")
                    else:
                        print(f"{self.colores['error']}Opci√≥n inv√°lida{self.colores['reset']}")
                
                elif choice == "5":
                    modes = ["texto", "audio"]
                    print(f"\n{self.colores['titulo']}Modos disponibles:{self.colores['reset']}")
                    for i, mode in enumerate(modes, 1):
                        print(f"{self.colores['opcion']}{i}. {mode}{self.colores['reset']}")
                    
                    mode_choice = input(f"\n{self.colores['opcion']}Selecciona un modo (1-{len(modes)}): {self.colores['reset']}")
                    try:
                        mode_index = int(mode_choice) - 1
                        if 0 <= mode_index < len(modes):
                            self.config["modo_interaccion"] = modes[mode_index]
                            print(f"{self.colores['exito']}Modo actualizado a {modes[mode_index]}{self.colores['reset']}")
                            if modes[mode_index] == "audio":
                                print(f"{self.colores['error']}Nota: El modo de audio a√∫n no est√° completamente implementado{self.colores['reset']}")
                        else:
                            print(f"{self.colores['error']}Opci√≥n inv√°lida{self.colores['reset']}")
                    except ValueError:
                        print(f"{self.colores['error']}Por favor, introduce un n√∫mero{self.colores['reset']}")
                
                elif choice == "6":
                    show_menu = input(f"{self.colores['opcion']}¬øMostrar este men√∫ al inicio? (s/n): {self.colores['reset']}")
                    if show_menu.lower() in ["s", "si", "s√≠", "y", "yes"]:
                        self.config["mostrar_menu_inicio"] = True
                        print(f"{self.colores['exito']}El men√∫ se mostrar√° al inicio{self.colores['reset']}")
                    elif show_menu.lower() in ["n", "no"]:
                        self.config["mostrar_menu_inicio"] = False
                        print(f"{self.colores['exito']}El men√∫ no se mostrar√° al inicio{self.colores['reset']}")
                    else:
                        print(f"{self.colores['error']}Opci√≥n inv√°lida{self.colores['reset']}")
                
                elif choice == "7":
                    if self.save_config():
                        print(f"{self.colores['exito']}Configuraci√≥n guardada correctamente{self.colores['reset']}")
                    else:
                        print(f"{self.colores['error']}Error al guardar la configuraci√≥n{self.colores['reset']}")
                    return self.config
                
                elif choice == "8":
                    print(f"{self.colores['titulo']}Saliendo sin guardar{self.colores['reset']}")
                    return self.config
                
                else:
                    print(f"{self.colores['error']}Opci√≥n inv√°lida{self.colores['reset']}")
            
            except KeyboardInterrupt:
                print(f"\n{self.colores['titulo']}Saliendo sin guardar{self.colores['reset']}")
                return self.config


class JarvisMemory:
    """
    Clase para gestionar la memoria mejorada de JARVIS.
    Permite recordar resultados de comandos y hacer referencias a ellos.
    """

    def __init__(self, memory_file: str = None, max_memory_items: int = 100):
        """
        Inicializa el sistema de memoria para JARVIS
        
        Args:
            memory_file: Ruta al archivo de almacenamiento de memoria
            max_memory_items: N√∫mero m√°ximo de elementos de memoria a almacenar
        """
        self.memory_file = memory_file or os.path.join(os.path.expanduser("~"), "jarvis_memory.json")
        self.max_memory_items = max_memory_items
        self.memory_data = {
            "conversations": [],
            "file_interactions": {},
            "command_history": [],
            "context_links": {},
            "last_updated": time.time()
        }
        
        # Memoria a corto plazo para resultados de comandos
        self.command_results = {}
        
        # Memoria espec√≠fica para archivos encontrados
        self.found_files = []
        
        # Memoria para la √∫ltima operaci√≥n
        self.last_operation = {
            "type": None,  # Tipo de operaci√≥n (buscar_archivos, leer_archivo, etc.)
            "result": None,  # Resultado de la operaci√≥n
            "timestamp": None  # Momento en que se realiz√≥
        }
        
        # Historial de resultados para incluir en el contexto
        self.results_history = []
        
        self.load_memory()
        
        # Inicializar ChromaDB si est√° disponible
        self.collection = None
        if CHROMADB_DISPONIBLE:
            try:
                self.init_chromadb()
            except Exception as e:
                logger.error(f"Error al inicializar ChromaDB: {e}")
    
    def init_chromadb(self):
        """Inicializa ChromaDB si est√° disponible"""
        if not CHROMADB_DISPONIBLE or not OPENAI_DISPONIBLE:
            return
            
        try:
            chroma_ef = embedding_functions.OpenAIEmbeddingFunction(
                api_key=os.environ["OPENAI_API_KEY"], model_name="text-embedding-ada-002"
            )
            self.client = chromadb.PersistentClient(path=CHROMA_DB_DIR)
            self.collection = self.client.get_or_create_collection(
                name="conversation_memory", embedding_function=chroma_ef
            )
            logger.info("ChromaDB inicializado correctamente")
        except Exception as e:
            logger.error(f"Error al inicializar ChromaDB: {e}")
            self.collection = None
    
    def load_memory(self) -> bool:
        """Carga la memoria desde el archivo de almacenamiento"""
        try:
            if os.path.exists(self.memory_file):
                with open(self.memory_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.memory_data = data
                logger.info(f"Memoria cargada desde {self.memory_file}")
                return True
            logger.info("No se encontr√≥ archivo de memoria, comenzando con memoria vac√≠a")
            return False
        except Exception as e:
            logger.error(f"Error al cargar la memoria: {e}")
            return False
    
    def save_memory(self) -> bool:
        """Guarda la memoria en el archivo de almacenamiento"""
        try:
            # Asegurar que el directorio existe
            os.makedirs(os.path.dirname(os.path.abspath(self.memory_file)), exist_ok=True)
            
            # Actualizar timestamp
            self.memory_data["last_updated"] = time.time()
            
            with open(self.memory_file, 'w', encoding='utf-8') as f:
                json.dump(self.memory_data, f, indent=4)
            logger.debug(f"Memoria guardada en {self.memory_file}")
            return True
        except Exception as e:
            logger.error(f"Error al guardar la memoria: {e}")
            return False
    
    def add_conversation(self, user_input: str, assistant_response: str, 
                         executed_code: Optional[str] = None, 
                         code_result: Optional[str] = None) -> str:
        """
        A√±ade un intercambio de conversaci√≥n a la memoria
        
        Returns:
            conversation_id: ID √∫nico para esta conversaci√≥n
        """
        conversation_id = f"conv_{int(time.time())}_{len(self.memory_data['conversations'])}"
        
        conversation = {
            "id": conversation_id,
            "timestamp": time.time(),
            "user_input": user_input,
            "assistant_response": assistant_response,
            "executed_code": executed_code,
            "code_result": code_result,
            "related_files": [],
            "related_conversations": []
        }
        
        # A√±adir a la memoria y mantener el l√≠mite de tama√±o
        self.memory_data["conversations"].insert(0, conversation)
        if len(self.memory_data["conversations"]) > self.max_memory_items:
            self.memory_data["conversations"] = self.memory_data["conversations"][:self.max_memory_items]
        
        # Guardar en ChromaDB si est√° disponible
        if self.collection is not None:
            try:
                text = f"Usuario: {user_input}\nJARVIS: {assistant_response}"
                if code_result:
                    text += f"\nResultado: {code_result}"
                
                self.collection.add(
                    documents=[text],
                    ids=[conversation_id],
                    metadatas=[{"conversation_id": conversation_id}]
                )
            except Exception as e:
                logger.error(f"Error al guardar en ChromaDB: {e}")
        
        # A√±adir al historial de resultados para contexto
        if code_result:
            self.results_history.append({
                "query": user_input,
                "result": code_result,
                "timestamp": time.time()
            })
            # Mantener solo los √∫ltimos 5 resultados
            if len(self.results_history) > 5:
                self.results_history = self.results_history[-5:]
        
        self.save_memory()
        logger.info(f"A√±adida conversaci√≥n con ID: {conversation_id}")
        return conversation_id
    
    def add_file_interaction(self, file_path: str, action: str, 
                             conversation_id: Optional[str] = None) -> None:
        """Registra una interacci√≥n con un archivo"""
        abs_path = os.path.abspath(os.path.expanduser(file_path))
        
        if abs_path not in self.memory_data["file_interactions"]:
            self.memory_data["file_interactions"][abs_path] = []
        
        interaction = {
            "timestamp": time.time(),
            "action": action,
            "conversation_id": conversation_id
        }
        
        self.memory_data["file_interactions"][abs_path].insert(0, interaction)
        
        # Si est√° vinculado a una conversaci√≥n, actualizar tambi√©n la conversaci√≥n
        if conversation_id:
            for conv in self.memory_data["conversations"]:
                if conv["id"] == conversation_id:
                    if abs_path not in conv["related_files"]:
                        conv["related_files"].append(abs_path)
                    break
        
        self.save_memory()
        logger.debug(f"A√±adida interacci√≥n con archivo: {action} en {abs_path}")
    
    def add_command(self, command: str, result: str, 
                    conversation_id: Optional[str] = None) -> None:
        """Registra la ejecuci√≥n de un comando"""
        command_record = {
            "timestamp": time.time(),
            "command": command,
            "result": result,
            "conversation_id": conversation_id
        }
        
        self.memory_data["command_history"].insert(0, command_record)
        if len(self.memory_data["command_history"]) > self.max_memory_items:
            self.memory_data["command_history"] = self.memory_data["command_history"][:self.max_memory_items]
        
        self.save_memory()
        logger.debug(f"A√±adido comando al historial: {command}")
    
    def link_conversations(self, source_id: str, target_id: str, 
                           relation_type: str = "follow-up") -> bool:
        """Crea un enlace entre dos conversaciones"""
        source_found = False
        target_found = False
        
        for conv in self.memory_data["conversations"]:
            if conv["id"] == source_id:
                if target_id not in [rel["id"] for rel in conv["related_conversations"]]:
                    conv["related_conversations"].append({
                        "id": target_id,
                        "relation": relation_type
                    })
                source_found = True
            
            if conv["id"] == target_id:
                target_found = True
        
        if source_found and target_found:
            self.save_memory()
            logger.info(f"Conversaciones enlazadas: {source_id} -> {target_id} ({relation_type})")
            return True
        
        logger.warning(f"No se pudieron enlazar las conversaciones: {source_id} -> {target_id}")
        return False
    
    def get_conversation_by_id(self, conversation_id: str) -> Optional[Dict]:
        """Recupera una conversaci√≥n espec√≠fica por ID"""
        for conv in self.memory_data["conversations"]:
            if conv["id"] == conversation_id:
                return conv
        return None
    
    def get_recent_conversations(self, count: int = 5) -> List[Dict]:
        """Obtiene las conversaciones m√°s recientes"""
        return self.memory_data["conversations"][:count]
    
    def get_file_history(self, file_path: str) -> List[Dict]:
        """Obtiene el historial de interacciones para un archivo espec√≠fico"""
        abs_path = os.path.abspath(os.path.expanduser(file_path))
        return self.memory_data["file_interactions"].get(abs_path, [])
    
    def search_conversations(self, query: str) -> List[Dict]:
        """Busca conversaciones para una consulta espec√≠fica"""
        # Si ChromaDB est√° disponible, usar b√∫squeda sem√°ntica
        if self.collection is not None:
            try:
                results = self.collection.query(query_texts=[query], n_results=5)
                conversation_ids = [meta["conversation_id"] for meta in results["metadatas"][0]] if results["metadatas"] else []
                
                if conversation_ids:
                    return [conv for conv in self.memory_data["conversations"] if conv["id"] in conversation_ids]
            except Exception as e:
                logger.error(f"Error en b√∫squeda sem√°ntica: {e}")
        
        # B√∫squeda por palabras clave como respaldo
        results = []
        for conv in self.memory_data["conversations"]:
            if (query.lower() in conv["user_input"].lower() or 
                query.lower() in conv["assistant_response"].lower()):
                results.append(conv)
        return results
    
    def get_related_context(self, query: str, max_items: int = 3) -> Dict[str, Any]:
        """
        Obtiene contexto relacionado para una nueva consulta basado en interacciones previas
        
        Returns un diccionario con informaci√≥n de contexto relevante
        """
        context = {
            "related_conversations": [],
            "related_files": [],
            "related_commands": [],
            "recent_results": self.results_history  # Incluir autom√°ticamente el historial de resultados
        }
        
        # Encontrar conversaciones relacionadas
        related_convs = self.search_conversations(query)
        context["related_conversations"] = related_convs[:max_items]
        
        # Encontrar archivos relacionados
        mentioned_files = []
        for word in query.split():
            if os.path.exists(word):
                mentioned_files.append(os.path.abspath(word))
        
        for file_path in mentioned_files:
            if file_path in self.memory_data["file_interactions"]:
                context["related_files"].append({
                    "path": file_path,
                    "interactions": self.memory_data["file_interactions"][file_path][:max_items]
                })
        
        # Encontrar comandos relacionados
        for cmd in self.memory_data["command_history"]:
            if query.lower() in cmd["command"].lower():
                context["related_commands"].append(cmd)
                if len(context["related_commands"]) >= max_items:
                    break
        
        logger.debug(f"Encontrado contexto relacionado: {len(context['related_conversations'])} conversaciones, "
                    f"{len(context['related_files'])} archivos, {len(context['related_commands'])} comandos")
        return context
    
    def clear_memory(self) -> bool:
        """Limpia todos los datos de memoria"""
        self.memory_data = {
            "conversations": [],
            "file_interactions": {},
            "command_history": [],
            "context_links": {},
            "last_updated": time.time()
        }
        
        # Tambi√©n limpiar la memoria a corto plazo
        self.command_results = {}
        self.found_files = []
        self.last_operation = {
            "type": None,
            "result": None,
            "timestamp": None
        }
        self.results_history = []
        
        # Limpiar ChromaDB si est√° disponible
        if self.collection is not None:
            try:
                self.collection.delete(where={})
            except Exception as e:
                logger.error(f"Error al limpiar ChromaDB: {e}")
        
        logger.info("Memoria limpiada")
        return self.save_memory()
    
    def extract_file_references(self, code: str) -> List[Tuple[str, str]]:
        """
        Extrae referencias a archivos del c√≥digo con sus probables acciones
        Devuelve una lista de tuplas (ruta_archivo, acci√≥n)
        """
        file_refs = []
        
        # Patr√≥n para llamadas a open()
        open_pattern = r'open\([\'"]([^\'"]+)[\'"](?:,\s*[\'"]([^\'"]+)[\'"])?'
        for match in re.finditer(open_pattern, code):
            file_path = match.group(1)
            mode = match.group(2) if match.group(2) else 'r'
            
            action = 'read'
            if 'w' in mode or 'a' in mode:
                action = 'write'
            
            file_refs.append((file_path, action))
        
        # Patr√≥n para operaciones de Path
        path_pattern = r'Path$[\'"]([^\'"]+)[\'"]$\.(?:write_text|write_bytes|open)'
        for match in re.finditer(path_pattern, code):
            file_path = match.group(1)
            file_refs.append((file_path, 'write'))
        
        # Patr√≥n para operaciones de os.path
        os_pattern = r'os\.(?:rename|makedirs|mkdir)$[\'"]([^\'"]+)[\'"]$'
        for match in re.finditer(os_pattern, code):
            file_path = match.group(1)
            file_refs.append((file_path, 'modify'))
        
        return file_refs
    
    def format_context_for_prompt(self, context: Dict[str, Any]) -> str:
        """Formatea la informaci√≥n de contexto para incluirla en un prompt"""
        prompt_parts = []
        
        # Incluir resultados recientes autom√°ticamente
        if context["recent_results"]:
            prompt_parts.append("Resultados recientes de comandos:")
            for i, result in enumerate(context["recent_results"], 1):
                time_str = time.strftime("%Y-%m-%d %H:%M", time.localtime(result["timestamp"]))
                prompt_parts.append(f"{i}. {time_str} - Consulta: {result['query']}")
                result_text = str(result["result"])
                if len(result_text) > 150:
                    result_text = result_text[:150] + "..."
                prompt_parts.append(f"   Resultado: {result_text}")
            prompt_parts.append("")  # L√≠nea vac√≠a
        
        if context["related_conversations"]:
            prompt_parts.append("Conversaciones previas relevantes:")
            for i, conv in enumerate(context["related_conversations"], 1):
                time_str = time.strftime("%Y-%m-%d %H:%M", time.localtime(conv["timestamp"]))
                prompt_parts.append(f"{i}. {time_str}")
                prompt_parts.append(f"   T√∫: {conv['user_input']}")
                prompt_parts.append(f"   JARVIS: {conv['assistant_response']}")
                if conv.get("code_result"):
                    result_text = str(conv["code_result"])
                    if len(result_text) > 100:
                        result_text = result_text[:100] + "..."
                    prompt_parts.append(f"   Resultado: {result_text}")
                if i < len(context["related_conversations"]):
                    prompt_parts.append("")  # L√≠nea vac√≠a entre conversaciones
        
        if context["related_files"]:
            if prompt_parts:
                prompt_parts.append("")  # L√≠nea vac√≠a antes de nueva secci√≥n
            prompt_parts.append("Archivos relevantes:")
            for file_info in context["related_files"]:
                file_path = file_info["path"]
                interactions = file_info["interactions"]
                last_action = interactions[0]["action"] if interactions else "desconocido"
                time_str = time.strftime("%Y-%m-%d %H:%M", 
                                        time.localtime(interactions[0]["timestamp"])) if interactions else "desconocido"
                prompt_parts.append(f"- {file_path} (√öltima acci√≥n: {last_action} a las {time_str})")
        
        if context["related_commands"]:
            if prompt_parts:
                prompt_parts.append("")  # L√≠nea vac√≠a antes de nueva secci√≥n
            prompt_parts.append("Comandos relevantes recientes:")
            for cmd in context["related_commands"]:
                time_str = time.strftime("%Y-%m-%d %H:%M", time.localtime(cmd["timestamp"]))
                prompt_parts.append(f"- {time_str}: {cmd['command']}")
                if cmd["result"]:
                    # Truncar resultados largos
                    result = cmd["result"]
                    if len(result) > 100:
                        result = result[:100] + "..."
                    prompt_parts.append(f"  Resultado: {result}")
        
        return "\n".join(prompt_parts)
    
    # M√©todos para la memoria a corto plazo
    
    def store_command_result(self, command_type: str, result: Any) -> None:
        """
        Almacena el resultado de un comando para referencia futura
        
        Args:
            command_type: Tipo de comando (buscar_archivos, leer_archivo, etc.)
            result: Resultado del comando
        """
        self.command_results[command_type] = result
        
        # Actualizar la √∫ltima operaci√≥n
        self.last_operation = {
            "type": command_type,
            "result": result,
            "timestamp": time.time()
        }
        
        # Si es una b√∫squeda de archivos, almacenar los archivos encontrados
        if command_type == "buscar_archivos" and isinstance(result, list):
            self.found_files = result
            logger.debug(f"Almacenados {len(result)} archivos encontrados en memoria")
        
        logger.debug(f"Almacenado resultado de comando para {command_type}")
    
    def get_command_result(self, command_type: str) -> Any:
        """
        Recupera el resultado de un comando previo
        
        Args:
            command_type: Tipo de comando (buscar_archivos, leer_archivo, etc.)
            
        Returns:
            El resultado almacenado o None si no existe
        """
        return self.command_results.get(command_type)
    
    def get_last_operation(self) -> Dict[str, Any]:
        """
        Recupera informaci√≥n sobre la √∫ltima operaci√≥n realizada
        
        Returns:
            Diccionario con informaci√≥n de la √∫ltima operaci√≥n
        """
        return self.last_operation
    
    def get_file_by_reference(self, reference: str) -> Optional[str]:
        """
        Obtiene la ruta de un archivo basado en una referencia como "el primero", "el segundo", etc.
        
        Args:
            reference: Referencia al archivo ("el primero", "el segundo", "el √∫ltimo", etc.)
            
        Returns:
            Ruta del archivo o None si no se encuentra
        """
        if not self.found_files:
            return None
        
        reference = reference.lower()
        
        # Manejar referencias num√©ricas
        if "primer" in reference or "primero" in reference or "1" in reference:
            return self.found_files[0] if self.found_files else None
        elif "segundo" in reference or "2" in reference:
            return self.found_files[1] if len(self.found_files) > 1 else None
        elif "tercer" in reference or "tercero" in reference or "3" in reference:
            return self.found_files[2] if len(self.found_files) > 2 else None
        elif "cuarto" in reference or "4" in reference:
            return self.found_files[3] if len(self.found_files) > 3 else None
        elif "quinto" in reference or "5" in reference:
            return self.found_files[4] if len(self.found_files) > 4 else None
        elif "√∫ltimo" in reference or "ultima" in reference:
            return self.found_files[-1] if self.found_files else None
        
        # Intentar extraer un n√∫mero
        match = re.search(r'(\d+)', reference)
        if match:
            index = int(match.group(1)) - 1  # Convertir a √≠ndice base 0
            if 0 <= index < len(self.found_files):
                return self.found_files[index]
        
        return None
    
    def extract_file_reference_from_query(self, query: str) -> Optional[str]:
        """
        Extrae una referencia a un archivo de una consulta
        
        Args:
            query: Consulta del usuario
            
        Returns:
            Referencia extra√≠da o None si no se encuentra
        """
        # Patrones para detectar referencias a archivos
        patterns = [
            r'(?:el|la|los|las) (primer[oa]?|segund[oa]?|tercer[oa]?|cuart[oa]?|quint[oa]?|√∫ltim[oa]?)',
            r'(?:el|la|los|las) (?:archivo|documento|fichero) (?:n√∫mero)? (\d+)',
            r'(?:el|la|los|las) (\d+)(?:¬∫|¬∞)?',
            r'n√∫mero (\d+)',
            r'archivo (\d+)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, query.lower())
            if match:
                return match.group(1)
        
        return None


class Chatbot:
    """
    Clase principal para el chatbot.
    """

    def __init__(self, config_path: str = DEFAULT_CONFIG_PATH):
        """
        Inicializa el chatbot.

        Args:
            config_path: Ruta al archivo de configuraci√≥n.
        """
        self.load_config(config_path)
        self.colores = {
            "principal": Fore.GREEN,  # Verde claro
            "secundario": Fore.BLUE,  # Azul claro
            "terciario": Fore.YELLOW,  # Amarillo
            "aviso": Fore.RED,  # Rojo claro
            "error": Fore.RED + Style.BRIGHT,  # Rojo brillante
            "reset": Style.RESET_ALL,  # Resetear color
        }
        self.conversation_history = deque(maxlen=MAX_HISTORIAL)
        self.memory = JarvisMemory()
        self.current_conversation_id = None
        self.safe_environment = {
            "__builtins__": {
                "print": print,
                "len": len,
                "range": range,
                "enumerate": enumerate,
                "zip": zip,
                "map": map,
                "filter": filter,
                "sorted": sorted,
                "sum": sum,
                "min": min,
                "max": max,
                "abs": abs,
                "round": round,
                "any": any,
                "all": all,
                "dir": dir,
                "getattr": getattr,
                "hasattr": hasattr,
                "isinstance": isinstance,
                "issubclass": issubclass,
                "type": type,
                "id": id,
                "help": help,
                "str": str,
                "int": int,
                "float": float,
                "bool": bool,
                "list": list,
                "dict": dict,
                "set": set,
                "tuple": tuple,
                "open": open,
                "__import__": __import__,
            },
            "os": os,
            "subprocess": subprocess,
            "glob": __import__("glob"),
            "re": re,
            "time": time,
            "shutil": __import__("shutil"),
            "psutil": psutil,
            "platform": platform,
            "Path": Path,
            "archivos_encontrados": [],
            "abrir_archivo": self.abrir_archivo,
            "obtener_archivo": self.obtener_archivo,
            "obtener_escritorio": self.obtener_escritorio,
            "obtener_documentos": self.obtener_documentos,
            "obtener_descargas": self.obtener_descargas,
            "ejecutar_comando": self.ejecutar_comando,
        }
        if OPENAI_DISPONIBLE:
            from openai import OpenAI

            self.client_openai = OpenAI()
        else:
            self.client_openai = None
            logger.warning("OpenAI API key no encontrada. No se podr√°n generar respuestas.")

    def load_config(self, config_path: str) -> None:
        """
        Carga la configuraci√≥n desde un archivo YAML o desde el men√∫ de configuraci√≥n.

        Args:
            config_path: Ruta al archivo de configuraci√≥n.
        """
        config_menu = ConfigMenu(config_path)
        self.config = config_menu.config
        
        # Mostrar el men√∫ de configuraci√≥n si est√° habilitado
        if self.config.get("mostrar_menu_inicio", True):
            self.config = config_menu.run()
        
        logger.info("Configuraci√≥n cargada")

    def timer(self, name: str):
        """
        Crea un objeto Timer para medir el tiempo de ejecuci√≥n.

        Args:
            name: Nombre del temporizador.

        Returns:
            Objeto Timer.
        """
        return Timer(name)

    async def speak(self, text: str) -> None:
        """
        Simula el habla del chatbot imprimiendo el texto.

        Args:
            text: Texto a imprimir.
        """
        print(f"{self.colores['principal']}JARVIS: {text}{self.colores['reset']}")

    def extract_code(self, text: str) -> str:
        """
        Extrae el c√≥digo de un texto.

        Args:
            text: Texto del cual extraer el c√≥digo.

        Returns:
            C√≥digo extra√≠do.
        """
        # Buscar bloques de c√≥digo delimitados por \`\`\`python y \`\`\`
        match = re.search(r"\`\`\`(?:python)?\n([\s\S]*?)\n\`\`\`", text)
        if match:
            return match.group(1).strip()

        # Si no hay delimitadores, buscar l√≠neas que empiecen con "CODIGO:"
        lines = text.splitlines()
        for line in lines:
            if line.startswith("CODIGO:"):
                return line[len("CODIGO:") :].strip()

        # Si no se encuentra nada, devolver el texto original
        return text.strip()

    def contains_code_delimiters(self, text: str) -> bool:
        """
        Verifica si un texto contiene delimitadores de c√≥digo.

        Args:
            text: Texto a verificar.

        Returns:
            True si el texto contiene delimitadores de c√≥digo, False en caso contrario.
        """
        return "\`\`\`python" in text or "\`\`\`" in text

    def validate_code(self, code: str) -> Tuple[bool, str]:
        """
        Valida el c√≥digo antes de ejecutarlo.

        Args:
            code: C√≥digo a validar.

        Returns:
            Una tupla con un booleano indicando si el c√≥digo es v√°lido y un mensaje de error en caso de que no lo sea.
        """
        # Verificar si el c√≥digo est√° vac√≠o
        if not code or not code.strip():
            return False, "El c√≥digo est√° vac√≠o."

        # Verificar si el c√≥digo contiene llamadas a funciones no permitidas
        if "input(" in code:
            return False, "El c√≥digo contiene llamadas a la funci√≥n 'input', que no est√° permitida."

        # Verificar si el c√≥digo contiene operaciones de red no permitidas
        if "socket." in code:
            return False, "El c√≥digo contiene operaciones de red, que no est√°n permitidas."
        if "urllib." in code:
            return False, "El c√≥digo contiene operaciones de red, que no est√°n permitidas."
        if "requests." in code:
            return False, "El c√≥digo contiene operaciones de red, que no est√°n permitidas."

        # Verificar si el c√≥digo contiene operaciones de eliminaci√≥n de archivos
        if "os.remove" in code or "os.unlink" in code or "shutil.rmtree" in code:
            return False, "El c√≥digo contiene operaciones de eliminaci√≥n de archivos, que no est√°n permitidas por seguridad."
    
        # Verificar si hay patrones peligrosos de eliminaci√≥n
        dangerous_patterns = [
            r'rm\s+-rf',  # rm -rf en comandos shell
            r'del\s+/[QSF]',  # del /Q o similares en Windows
            r'rmdir\s+/[QS]',  # rmdir /Q o similares en Windows
        ]
        
        for pattern in dangerous_patterns:
            if re.search(pattern, code):
                return False, "El c√≥digo contiene comandos de eliminaci√≥n de archivos, que no est√°n permitidos por seguridad."

        # Si pasa todas las verificaciones, se considera v√°lido
        return True, ""

    def execute_code(self, code: str) -> Any:
        """
        Ejecuta el c√≥digo en un entorno seguro.

        Args:
            code: C√≥digo a ejecutar.

        Returns:
            El resultado de la ejecuci√≥n del c√≥digo.
        """
        try:
            # Crear un entorno seguro para la ejecuci√≥n del c√≥digo
            local_vars = {}

            # Ejecutar el c√≥digo en el entorno seguro
            exec(code, self.safe_environment, local_vars)

            # Buscar la variable __result en el entorno local
            if "__result" in local_vars:
                return local_vars["__result"]
            else:
                return "C√≥digo ejecutado sin errores, pero no se encontr√≥ un resultado expl√≠cito."
        except Exception as e:
            logger.error(f"Error al ejecutar c√≥digo: {e}")
            print(f"{self.colores['error']}Error al ejecutar c√≥digo: {str(e)}{self.colores['reset']}")
            error_traceback = traceback.format_exc()
            logger.debug(f"Traceback: {error_traceback}")
            print(error_traceback)
            return f"Error: {str(e)}"

    def abrir_archivo(self, ruta: str) -> str:
        """
        Abre un archivo con la aplicaci√≥n predeterminada del sistema operativo.

        Args:
            ruta: Ruta del archivo a abrir.

        Returns:
            Un mensaje indicando si el archivo se abri√≥ correctamente o si hubo un error.
        """
        try:
            if SISTEMA_OPERATIVO == "Windows":
                os.startfile(ruta)
            elif SISTEMA_OPERATIVO == "Darwin":
                subprocess.run(["open", ruta])
            else:
                subprocess.run(["xdg-open", ruta])
            return f"Archivo '{ruta}' abierto correctamente."
        except Exception as e:
            logger.error(f"Error al abrir el archivo: {e}")
            return f"Error al abrir el archivo '{ruta}': {str(e)}"

    def obtener_archivo(self, ruta: str) -> str:
        """
        Obtiene la ruta absoluta de un archivo.

        Args:
            ruta: Ruta del archivo.

        Returns:
            La ruta absoluta del archivo.
        """
        return os.path.abspath(ruta)

    def obtener_escritorio(self) -> str:
        """
        Obtiene la ruta al escritorio del usuario.

        Returns:
            La ruta al escritorio del usuario.
        """
        return str(Path.home() / "Desktop")

    def obtener_documentos(self) -> str:
        """
        Obtiene la ruta a la carpeta de documentos del usuario.

        Returns:
            La ruta a la carpeta de documentos del usuario.
        """
        return str(Path.home() / "Documents")

    def obtener_descargas(self) -> str:
        """
        Obtiene la ruta a la carpeta de descargas del usuario.

        Returns:
            La ruta a la carpeta de descargas del usuario.
        """
        return str(Path.home() / "Downloads")

    def ejecutar_comando(self, comando: str) -> str:
        """
        Ejecuta un comando del sistema de forma segura.

        Args:
            comando: Comando a ejecutar.

        Returns:
            La salida del comando.
        """
        try:
            result = subprocess.run(
                comando,
                shell=True,
                capture_output=True,
                text=True,
                check=True,
                cwd=os.getcwd(),
                env=os.environ,
            )
            return result.stdout.strip()
        except subprocess.CalledProcessError as e:
            logger.error(f"Error al ejecutar el comando: {e}")
            return f"Error: {e.stderr.strip()}"
        except Exception as e:
            logger.error(f"Error inesperado al ejecutar el comando: {e}")
            return f"Error inesperado: {str(e)}"

    def detectar_intencion(self, comando: str) -> Optional[str]:
        """
        Detecta la intenci√≥n del usuario a partir del comando.

        Args:
            comando: Comando del usuario.

        Returns:
            La intenci√≥n detectada o None si no se pudo detectar.
        """
        comando = comando.lower()

        # Lista de intenciones y sus palabras clave
        intenciones = {
            "buscar_archivos": ["buscar", "archivos", "encontrar", "listar"],
            "leer_archivo": ["leer", "archivo", "contenido"],
            "crear_archivo": ["crear", "archivo", "nuevo"],
            "crear_y_abrir_archivo": ["crear", "abrir", "archivo"],
            "borrar_archivo": ["borrar", "eliminar", "archivo"],
            "copiar_archivo": ["copiar", "archivo"],
            "mover_archivo": ["mover", "archivo"],
            "renombrar_archivo": ["renombrar", "archivo"],
            "crear_directorio": ["crear", "directorio", "carpeta"],
            "borrar_directorio": ["borrar", "eliminar", "directorio", "carpeta"],
            "obtener_info_sistema": ["informaci√≥n", "sistema", "cpu", "memoria", "disco"],
            "ejecutar_comando": ["ejecutar", "comando"],
            "abrir_pagina_web": ["abrir", "pagina", "web", "navegador"],
        }

        # Buscar la intenci√≥n que coincida con las palabras clave del comando
        for intencion, palabras_clave in intenciones.items():
            if all(palabra in comando for palabra in palabras_clave):
                return intencion

        # Si no se encontr√≥ una coincidencia exacta, buscar la mejor coincidencia parcial
        mejor_intencion = None
        max_coincidencias = 0
        
        for intencion, palabras_clave in intenciones.items():
            coincidencias = sum(1 for palabra in palabras_clave if palabra in comando)
            if coincidencias > max_coincidencias:
                max_coincidencias = coincidencias
                mejor_intencion = intencion
        
        # Solo devolver la intenci√≥n si hay al menos una coincidencia
        if max_coincidencias > 0:
            return mejor_intencion

        return None

    def extraer_parametros(self, comando: str, intencion: str) -> Dict[str, Any]:
        """
        Extrae los par√°metros del comando a partir de la intenci√≥n detectada.

        Args:
            comando: Comando del usuario.
            intencion: Intenci√≥n detectada.

        Returns:
            Un diccionario con los par√°metros extra√≠dos.
        """
        parametros = {}

        if intencion == "buscar_archivos":
            # Extraer el patr√≥n de b√∫squeda
            match = re.search(r"buscar archivos con patr√≥n (.*)", comando)
            if match:
                parametros["patron"] = match.group(1).strip()
            else:
                # Intentar extraer cualquier patr√≥n mencionado
                palabras = comando.split()
                for i, palabra in enumerate(palabras):
                    if palabra in ["buscar", "encontrar", "listar"] and i+1 < len(palabras):
                        parametros["patron"] = palabras[i+1]
                        break

        elif intencion == "leer_archivo":
            # Extraer la ruta del archivo
            match = re.search(r"leer archivo (.*)", comando)
            if match:
                parametros["ruta"] = match.group(1).strip()

        elif intencion == "crear_archivo" or intencion == "crear_y_abrir_archivo":
            # Extraer la ruta del archivo
            match = re.search(r"crear archivo (.*?)(?: en (.*))?$", comando)
            if match:
                nombre_archivo = match.group(1).strip()
                ubicacion = match.group(2).strip() if match.group(2) else "escritorio"
                
                parametros["nombre_archivo"] = nombre_archivo
                parametros["ubicacion"] = ubicacion
            else:
                # Buscar cualquier nombre de archivo mencionado
                palabras = comando.split()
                for palabra in palabras:
                    if "." in palabra:
                        parametros["nombre_archivo"] = palabra
                        parametros["ubicacion"] = "escritorio"
                        break

        elif intencion == "borrar_archivo":
            # Extraer la ruta del archivo
            match = re.search(r"borrar archivo (.*)", comando)
            if match:
                parametros["ruta"] = match.group(1).strip()

        elif intencion == "copiar_archivo":
            # Extraer la ruta del archivo origen y destino
            match = re.search(r"copiar archivo (.*) a (.*)", comando)
            if match:
                parametros["origen"] = match.group(1).strip()
                parametros["destino"] = match.group(2).strip()

        elif intencion == "mover_archivo":
            # Extraer la ruta del archivo origen y destino
            match = re.search(r"mover archivo (.*) a (.*)", comando)
            if match:
                parametros["origen"] = match.group(1).strip()
                parametros["destino"] = match.group(2).strip()

        elif intencion == "renombrar_archivo":
            # Extraer la ruta del archivo origen y destino
            match = re.search(r"renombrar archivo (.*) a (.*)", comando)
            if match:
                parametros["origen"] = match.group(1).strip()
                parametros["destino"] = match.group(2).strip()

        elif intencion == "crear_directorio":
            # Extraer la ruta del directorio
            match = re.search(r"crear directorio (.*)", comando)
            if match:
                parametros["ruta"] = match.group(1).strip()

        elif intencion == "borrar_directorio":
            # Extraer la ruta del directorio
            match = re.search(r"borrar directorio (.*)", comando)
            if match:
                parametros["ruta"] = match.group(1).strip()

        elif intencion == "ejecutar_comando":
            # Extraer el comando a ejecutar
            match = re.search(r"ejecutar comando (.*)", comando)
            if match:
                parametros["comando"] = match.group(1).strip()

        elif intencion == "abrir_pagina_web":
            # Extraer la URL de la p√°gina web
            match = re.search(r"abrir p√°gina web (.*)", comando)
            if match:
                parametros["url"] = match.group(1).strip()

        return parametros

    def generar_codigo_desde_plantilla(self, intencion: str, parametros: Dict[str, Any]) -> Optional[str]:
        """
        Genera el c√≥digo a partir de una plantilla.

        Args:
            intencion: Intenci√≥n detectada.
            parametros: Par√°metros extra√≠dos.

        Returns:
            El c√≥digo generado o None si no se pudo generar.
        """
        # Si hay una plantilla predefinida para esta intenci√≥n, usarla
        if intencion in PLANTILLAS:
            try:
                # Reemplazar los par√°metros en la plantilla
                codigo_generado = PLANTILLAS[intencion].format(**parametros)
                return codigo_generado
            except KeyError as e:
                logger.error(f"Falta el par√°metro {e} para la plantilla de {intencion}")
                return None
        
        return None

    async def handle_memory_commands(self, command: str) -> bool:
        """
        Maneja los comandos relacionados con la memoria.

        Args:
            command: Comando del usuario.

        Returns:
            True si el comando fue manejado, False en caso contrario.
        """
        command = command.lower()

        if "recordar" in command:
            # Extraer la informaci√≥n a recordar
            match = re.search(r"recordar (.*)", command)
            if match:
                info = match.group(1).strip()
                self.memory.store_command_result("recordar", info)
                await self.speak(f"He recordado: {info}")
                return True

        elif "olvidar" in command:
            # Extraer la informaci√≥n a olvidar
            match = re.search(r"olvidar (.*)", command)
            if match:
                info = match.group(1).strip()
                if "recordar" in self.memory.command_results and self.memory.command_results["recordar"] == info:
                    del self.memory.command_results["recordar"]
                    await self.speak(f"He olvidado: {info}")
                else:
                    await self.speak(f"No recuerdo haber guardado: {info}")
                return True

        elif "mostrar archivos" in command or "listar archivos encontrados" in command:
            # Mostrar los archivos encontrados en la √∫ltima b√∫squeda
            if not self.memory.found_files:
                await self.speak("No hay archivos en la memoria. Realiza una b√∫squeda primero.")
            else:
                resultado = "üìÑ Archivos encontrados en la √∫ltima b√∫squeda:\n"
                for i, archivo in enumerate(self.memory.found_files, 1):
                    resultado += f"{i}. {archivo}\n"
                await self.speak(resultado)
            return True

        elif "√∫ltima operaci√≥n" in command or "mostrar √∫ltima operaci√≥n" in command:
            # Mostrar informaci√≥n sobre la √∫ltima operaci√≥n
            last_op = self.memory.get_last_operation()
            
            if not last_op["type"]:
                await self.speak("No hay operaciones recientes en la memoria.")
            else:
                resultado = f"üîç √öltima operaci√≥n: {last_op['type']}\n"
                
                if last_op["timestamp"]:
                    time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(last_op["timestamp"]))
                    resultado += f"‚è∞ Realizada a las: {time_str}\n"
                
                if last_op["result"]:
                    if isinstance(last_op["result"], list):
                        resultado += f"üìä Resultado: Lista con {len(last_op['result'])} elementos\n"
                        if last_op["result"]:
                            resultado += "üìå Primeros elementos:\n"
                            for i, item in enumerate(last_op["result"][:3], 1):
                                resultado += f"  {i}. {item}\n"
                            if len(last_op["result"]) > 3:
                                resultado += f"  ... y {len(last_op['result']) - 3} m√°s\n"
                    else:
                        result_str = str(last_op["result"])
                        if len(result_str) > 200:
                            result_str = result_str[:200] + "..."
                        resultado += f"üìù Resultado: {result_str}\n"
                
                await self.speak(resultado)
            return True

        return False

    async def process_command(self, command: str) -> None:
        """Procesa un comando del usuario"""
        if not command:
            return
        
        # Verificar si es un comando relacionado con la memoria
        if await self.handle_memory_commands(command):
            return
            
        self.conversation_history.append({"role": "user", "content": command})

        if len(self.conversation_history) > MAX_HISTORIAL:
            self.conversation_history = self.conversation_history[-MAX_HISTORIAL:]

        # Verificar si el comando hace referencia a resultados anteriores
        command_with_context = await self.resolve_references(command)
        if command_with_context != command:
            logger.info(f"Comando con referencias resueltas: {command_with_context}")
            print(f"{self.colores['secundario']}Entendiendo: {command_with_context}{self.colores['reset']}")
        
        # Obtener contexto relacionado de la memoria
        context = self.memory.get_related_context(command_with_context)
        
        # Formatear el contexto para incluirlo en el prompt
        context_prompt = ""
        if any(len(context[key]) > 0 for key in context) or context.get("recent_results"):
            context_prompt = self.memory.format_context_for_prompt(context)
            logger.info("Se encontr√≥ contexto relevante en la memoria")
        
        # Detectar intenci√≥n y generar c√≥digo desde plantilla si es posible
        intencion = self.detectar_intencion(command_with_context)
        if intencion:
            logger.info(f"Intenci√≥n detectada: {intencion}")
            parametros = self.extraer_parametros(command_with_context, intencion)
            logger.info(f"Par√°metros extra√≠dos: {parametros}")
            codigo_generado = self.generar_codigo_desde_plantilla(intencion, parametros)
            
            if codigo_generado:
                # Validar el c√≥digo generado
                valid, error_msg = self.validate_code(codigo_generado)
                if valid:
                    # Generar una respuesta que incluya el c√≥digo
                    response = f"He entendido que quieres {intencion.replace('_', ' ')}. Aqu√≠ tienes el c√≥digo:\n\nCODIGO:\n{codigo_generado}"
                    
                    # Ejecutar el c√≥digo
                    logger.info("Detectado c√≥digo para ejecutar")
                    print(f"\n{self.colores['principal']}--- Detectado c√≥digo para ejecutar ---{self.colores['reset']}")
                    
                    # Si hay texto antes del c√≥digo, lo decimos
                    await self.speak(f"He entendido que quieres {intencion.replace('_', ' ')}.")
                    
                    print(f"\n{self.colores['principal']}C√≥digo generado:{self.colores['reset']}")
                    print("-" * 40)
                    print(codigo_generado)
                    print("-" * 40)
                    
                    try:
                        with self.timer("ejecuci√≥n de c√≥digo"):
                            result = self.execute_code(codigo_generado)
                        
                        executed_code = codigo_generado
                        code_result = result
                        
                        # Extraer referencias a archivos del c√≥digo y registrarlas
                        file_refs = self.memory.extract_file_references(codigo_generado)
                        for file_path, action in file_refs:
                            self.memory.add_file_interaction(file_path, action, self.current_conversation_id)
                        
                        # Detectar y almacenar resultados espec√≠ficos
                        self.store_command_results(codigo_generado, result)
                        
                        # Si hay un resultado, lo decimos
                        if result and result != "C√≥digo ejecutado sin errores, pero no se encontr√≥ un resultado expl√≠cito.":
                            await self.speak(f"Resultado: {result}")
                        
                        # A√±adir a la memoria
                        self.current_conversation_id = self.memory.add_conversation(
                            command,
                            response,
                            executed_code,
                            code_result
                        )
                        
                        return
                    except Exception as e:
                        logger.error(f"Error al ejecutar c√≥digo: {e}")
                        print(f"{self.colores['error']}Error al ejecutar c√≥digo: {str(e)}{self.colores['reset']}")
                        error_traceback = traceback.format_exc()
                        logger.debug(f"Traceback: {error_traceback}")
                        print(error_traceback)
                        code_result = f"Error: {str(e)}"
                        await self.speak(f"Hubo un error al ejecutar el c√≥digo: {str(e)}")
        
        # Si no se pudo generar c√≥digo desde plantilla o hubo un error, usar GPT
        with self.timer("generaci√≥n de respuesta"):
            response = await self.get_gpt_response(context_prompt, command_with_context)
        
        # Variables para almacenar c√≥digo ejecutado y resultado
        executed_code = None
        code_result = None
        
        # Verificar si la respuesta contiene c√≥digo para ejecutar
        if "CODIGO:" in response:
            logger.info("Detectado c√≥digo para ejecutar")
            print(f"\n{self.colores['principal']}--- Detectado c√≥digo para ejecutar ---{self.colores['reset']}")
            code_parts = response.split("CODIGO:", 1)
        
            # Si hay texto antes del c√≥digo, lo decimos
            if code_parts[0].strip():
                await self.speak(code_parts[0].strip())
        
            # Extraer el c√≥digo
            raw_code = code_parts[1].strip()
        
            # Verificar si el c√≥digo contiene delimitadores cuando no est√°n permitidos
            if not self.config["permitir_delimitadores"] and self.contains_code_delimiters(raw_code):
                logger.warning("El c√≥digo contiene delimitadores que no est√°n permitidos")
                print(f"{self.colores['aviso']}El c√≥digo contiene delimitadores que no est√°n permitidos. Intentando extraer el c√≥digo...{self.colores['reset']}")
                # Intentar extraer el c√≥digo de todos modos
                code = re.sub(r'\`\`\`(?:python)?([\s\S]*?)\`\`\`', r'\1', raw_code).strip()
            else:
                # Extraer el c√≥digo normalmente
                code = self.extract_code(raw_code)
        
            print(f"\n{self.colores['principal']}C√≥digo generado por la IA:{self.colores['reset']}")
            print("-" * 40)
            print(code)
            print("-" * 40)
        
            # Validar y ejecutar el c√≥digo
            valid, error_msg = self.validate_code(code)
            if valid:
                try:
                    with self.timer("ejecuci√≥n de c√≥digo"):
                        result = self.execute_code(code)
                    
                    executed_code = code
                    code_result = result
                    
                    # Extraer referencias a archivos del c√≥digo y registrarlas
                    file_refs = self.memory.extract_file_references(code)
                    for file_path, action in file_refs:
                        self.memory.add_file_interaction(file_path, action, self.current_conversation_id)
                    
                    # Detectar y almacenar resultados espec√≠ficos
                    self.store_command_results(code, result)
                    
                    # Si hay un resultado, lo decimos
                    if result:
                        await self.speak(f"Resultado: {result}")
                    else:
                        await self.speak("C√≥digo ejecutado con √©xito.")
                except Exception as e:
                    logger.error(f"Error al ejecutar c√≥digo: {e}")
                    print(f"{self.colores['error']}Error al ejecutar c√≥digo: {str(e)}{self.colores['reset']}")
                    error_traceback = traceback.format_exc()
                    logger.debug(f"Traceback: {error_traceback}")
                    print(error_traceback)
                    code_result = f"Error: {str(e)}"
                    await self.speak(f"Hubo un error al ejecutar el c√≥digo: {str(e)}")
            else:
                logger.error(f"Error de validaci√≥n: {error_msg}")
                print(f"{self.colores['error']}Error de validaci√≥n: {error_msg}{self.colores['reset']}")
                code_result = f"Error de validaci√≥n: {error_msg}"
                await self.speak(f"El c√≥digo generado no es v√°lido: {error_msg}")
        else:
            # Si no hay c√≥digo, simplemente respondemos
            self.conversation_history.append({"role": "assistant", "content": response})
            await self.speak(response)
        
        #  "assistant", "content": response})
            await self.speak(response)
        
        # A√±adir a la memoria
        self.current_conversation_id = self.memory.add_conversation(
            command,
            response,
            executed_code,
            code_result
        )
    
    async def resolve_references(self, command: str) -> str:
        """
        Resuelve referencias a resultados anteriores en el comando
        
        Args:
            command: Comando original del usuario
            
        Returns:
            Comando con referencias resueltas
        """
        # Verificar si hay referencias a archivos
        file_reference = self.memory.extract_file_reference_from_query(command)
        if file_reference:
            file_path = self.memory.get_file_by_reference(file_reference)
            if file_path:
                # Reemplazar la referencia con la ruta real
                command = re.sub(
                    r'(?:el|la|los|las) (?:archivo|documento|fichero)? (?:n√∫mero)? ' + re.escape(file_reference),
                    f'el archivo "{file_path}"',
                    command,
                    flags=re.IGNORECASE
                )
                # Si no funcion√≥ el reemplazo anterior, intentar con otro patr√≥n
                if file_path not in command:
                    command = re.sub(
                        r'(?:el|la|los|las) ' + re.escape(file_reference),
                        f'el archivo "{file_path}"',
                        command,
                        flags=re.IGNORECASE
                    )
        
        # Verificar referencias a la √∫ltima operaci√≥n
        last_op = self.memory.get_last_operation()
        if last_op["type"] and "√∫ltimo resultado" in command.lower():
            if isinstance(last_op["result"], str):
                command = command.replace("√∫ltimo resultado", f'"{last_op["result"]}"')
            elif isinstance(last_op["result"], list) and last_op["result"]:
                command = command.replace("√∫ltimo resultado", f'"{last_op["result"][0]}"')
        
        return command
    
    def store_command_results(self, code: str, result: Any) -> None:
        """
        Analiza el c√≥digo ejecutado y almacena resultados relevantes en la memoria
        
        Args:
            code: C√≥digo ejecutado
            result: Resultado de la ejecuci√≥n
        """
        # Detectar b√∫squeda de archivos
        if "glob.glob" in code or "os.listdir" in code:
            # Extraer rutas de archivos del resultado
            if isinstance(result, str):
                # Intentar extraer rutas de archivos del texto
                file_paths = re.findall(r'(?:\/|[A-Za-z]:\\)(?:[^:\n]+)', result)
                if file_paths:
                    self.memory.store_command_result("buscar_archivos", file_paths)
            
            # Si no se pudo extraer del resultado, intentar extraer del c√≥digo
            if "archivos_encontrados" in code:
                # El c√≥digo probablemente usa la plantilla buscar_archivos
                # que guarda los resultados en archivos_encontrados
                try:
                    # Ejecutar una versi√≥n modificada del c√≥digo para obtener solo los archivos
                    modified_code = re.sub(r'print$$.*?$$', '', code)
                    modified_code += "\n__result = archivos_encontrados"
                    
                    local_vars = {}
                    exec(modified_code, self.safe_environment, local_vars)
                    
                    if "__result" in local_vars and isinstance(local_vars["__result"], list):
                        self.memory.store_command_result("buscar_archivos", local_vars["__result"])
                except Exception as e:
                    logger.error(f"Error al extraer archivos encontrados: {e}")
        
        # Detectar lectura de archivo
        elif "open(" in code and "read" in code:
            # Extraer ruta del archivo
            match = re.search(r'open\([\'"]([^\'"]+)[\'"]', code)
            if match:
                file_path = match.group(1)
                self.memory.store_command_result("leer_archivo", file_path)
        
        # Detectar informaci√≥n del sistema
        elif "psutil" in code and "cpu_percent" in code:
            self.memory.store_command_result("info_sistema", result)
        
        # Detectar ejecuci√≥n de comando
        elif "ejecutar_comando" in code:
            match = re.search(r'comando\s*=\s*[\'"]([^\'"]+)[\'"]', code)
            if match:
                comando = match.group(1)
                self.memory.store_command_result("ejecutar_comando", comando)
        
        # Detectar creaci√≥n de archivo
        elif ("open(" in code and ("w" in code or "a" in code)) or "crear_archivo" in code:
            match = re.search(r'ruta_archivo\s*=\s*.*?[\'"]([^\'"]+)[\'"]', code)
            if match:
                file_path = match.group(1)
                self.memory.store_command_result("crear_archivo", file_path)
    
    async def get_gpt_response(self, context_prompt: str = "", resolved_command: str = "") -> str:
        """Obtiene una respuesta de GPT basada en el historial de conversaci√≥n y el contexto"""
        if not OPENAI_DISPONIBLE:
            return "Lo siento, OpenAI no est√° disponible. No puedo generar respuestas."
            
        try:
            # Obtener el √∫ltimo comando del usuario
            ultimo_comando = resolved_command or self.conversation_history[-1]["content"]
            
            # Detectar intenci√≥n y generar c√≥digo desde plantilla si es posible
            intencion = self.detectar_intencion(ultimo_comando)
            if intencion:
                parametros = self.extraer_parametros(ultimo_comando, intencion)
                codigo_generado = self.generar_codigo_desde_plantilla(intencion, parametros)
                
                if codigo_generado:
                    # Validar el c√≥digo generado
                    valid, error_msg = self.validate_code(codigo_generado)
                    if valid:
                        # Generar una respuesta que incluya el c√≥digo
                        respuesta = f"He entendido que quieres {intencion.replace('_', ' ')}. Aqu√≠ tienes el c√≥digo:\n\nCODIGO:\n{codigo_generado}"
                        return respuesta
            
            # Si no se pudo generar c√≥digo desde plantilla, usar GPT
            system_prompt = f"""Eres JARVIS, la IA creada por Tony Stark. Puedes generar c√≥digo Python para ejecutar comandos del usuario.
            
            IMPORTANTE: Cuando el usuario te pida realizar una acci√≥n en el sistema, DEBES responder con 'CODIGO:' seguido del c√≥digo Python en una nueva l√≠nea.
            
            {'NO' if not self.config["permitir_delimitadores"] else ''} incluyas delimitadores de formato como \`\`\`python o \`\`\` alrededor del c√≥digo.
            
            El usuario est√° ejecutando este programa en un sistema {SISTEMA_OPERATIVO}.

Tienes acceso a las siguientes funciones multiplataforma:
- abrir_archivo(ruta): Abre un archivo con la aplicaci√≥n predeterminada
- obtener_archivo(ruta): Obtiene la ruta absoluta de un archivo
- obtener_escritorio(): Devuelve la ruta al escritorio
- obtener_documentos(): Devuelve la ruta a documentos
- obtener_descargas(): Devuelve la ruta a descargas
- ejecutar_comando(comando): Ejecuta un comando del sistema de forma segura

Tienes acceso a los siguientes m√≥dulos y funciones:

1. M√≥dulos:
   - os: listdir, getcwd, mkdir, makedirs, rename, path, chdir, walk
   - os.path: join, exists, isfile, isdir, abspath, basename, dirname, expanduser, splitext
   - subprocess: run, Popen, PIPE, STDOUT, call, check_output
   - glob: todas las funciones
   - re: todas las funciones
   - time: sleep, time, ctime, strftime, localtime
   - shutil: copy, copy2, copytree, move
   - psutil: process_iter, cpu_percent, virtual_memory, disk_usage, net_io_counters, sensors_temperatures
   - platform: system, platform, version, machine, processor, architecture
   - Path: de pathlib, para manejo de rutas multiplataforma

2. Funciones integradas de Python:
   - print, open, str, int, float, bool, list, dict, set, tuple
   - len, range, enumerate, zip, map, filter, sorted, sum, min, max, abs, round
   - any, all, dir, getattr, hasattr, isinstance, issubclass, type, id, help

IMPORTANTE SOBRE SEGURIDAD:
- PUEDES crear y modificar archivos usando open() con modos 'w', 'a', etc.
- PUEDES crear directorios con os.mkdir o os.makedirs
- NO PUEDES eliminar archivos o directorios (os.remove, os.unlink, shutil.rmtree est√°n bloqueados)

GU√çA PARA GENERAR C√ìDIGO √ìPTIMO:

1. Usa siempre las funciones multiplataforma proporcionadas para garantizar compatibilidad.
2. Maneja siempre los errores con bloques try/except.
3. Verifica siempre si los archivos existen antes de intentar abrirlos.
4. Usa rutas absolutas cuando sea posible.
5. Imprime mensajes informativos para que el usuario sepa qu√© est√° pasando.
6. Usa codificaci√≥n UTF-8 al abrir archivos.
7. Evita usar comandos del sistema cuando puedas usar m√≥dulos de Python.
8. Usa f-strings para formatear cadenas.
9. Usa Path de pathlib para manipulaci√≥n de rutas cuando sea apropiada.
10. Usa os.path.join para construir rutas de manera multiplataforma.
11. Usa emojis en los mensajes para mejorar la experiencia del usuario.

RECUERDA: SIEMPRE usa 'CODIGO:' cuando necesites ejecutar una acci√≥n en el sistema.

INFORMACI√ìN IMPORTANTE SOBRE LA MEMORIA:
Puedo recordar los resultados de comandos anteriores. Si el usuario hace referencia a archivos o resultados previos sin especificar rutas completas, debo usar la informaci√≥n almacenada en mi memoria para resolver estas referencias.
"""
            
            # A√±adir informaci√≥n de contexto si est√° disponible
            if context_prompt:
                system_prompt += f"\n\nCONTEXTO RELEVANTE DE INTERACCIONES PREVIAS:\n{context_prompt}"
            
            # A√±adir informaci√≥n sobre la √∫ltima operaci√≥n
            last_op = self.memory.get_last_operation()
            if last_op["type"]:
                system_prompt += f"\n\n√öLTIMA OPERACI√ìN REALIZADA:\nTipo: {last_op['type']}"
                if last_op["result"]:
                    if isinstance(last_op["result"], list):
                        system_prompt += f"\nResultado: Lista con {len(last_op['result'])} elementos"
                        if last_op["result"]:
                            system_prompt += f"\nPrimer elemento: {last_op['result'][0]}"
                    else:
                        result_str = str(last_op["result"])
                        if len(result_str) > 100:
                            result_str = result_str[:100] + "..."
                        system_prompt += f"\nResultado: {result_str}"
            
            # A√±adir informaci√≥n sobre archivos encontrados
            if self.memory.found_files:
                system_prompt += "\n\nARCHIVOS ENCONTRADOS RECIENTEMENTE:"
                for i, file_path in enumerate(self.memory.found_files[:5], 1):
                    system_prompt += f"\n{i}. {file_path}"
                if len(self.memory.found_files) > 5:
                    system_prompt += f"\n... y {len(self.memory.found_files) - 5} m√°s"
            
            messages = [
                {"role": "system", "content": system_prompt}
            ]
            
            messages.extend(self.conversation_history)
            
            # A√±adir manejo de errores m√°s detallado
            try:
                response = self.client_openai.chat.completions.create(
                    model=self.config["modelo_gpt"],
                    messages=messages,
                    max_tokens=self.config["max_tokens"],
                    temperature=self.config["temperatura"]
                )
            
                response_text = response.choices[0].message.content
                return response_text
            except Exception as e:
                logger.error(f"Error espec√≠fico en la solicitud a OpenAI: {e}")
                # Registrar m√°s detalles para depuraci√≥n
                traceback.print_exc()
                return "Hubo un error al obtener la respuesta. Por favor, intenta de nuevo."
        except Exception as e:
            logger.error(f"Error general en get_gpt_response: {e}")
            traceback.print_exc()
            return "Ocurri√≥ un error inesperado. Por favor, intenta de nuevo."

    async def main_loop(self):
        """Bucle principal del chatbot."""
        print(f"{self.colores['principal']}¬°Bienvenido a JARVIS! Estoy listo para ayudarte.{self.colores['reset']}")
        print(f"{self.colores['secundario']}Escribe 'salir' para terminar o 'config' para abrir el men√∫ de configuraci√≥n.{self.colores['reset']}")
        
        while True:
            try:
                command = input(f"{self.colores['terciario']}T√∫: {self.colores['reset']}")
                if command.lower() in ["salir", "exit", "quit", "q"]:
                    print(f"{self.colores['principal']}¬°Hasta luego!{self.colores['reset']}")
                    break
                elif command.lower() in ["config", "configuracion", "configuraci√≥n", "settings"]:
                    config_menu = ConfigMenu(DEFAULT_CONFIG_PATH)
                    self.config = config_menu.run()
                    continue
                await self.process_command(command)
            except KeyboardInterrupt:
                print(f"\n{self.colores['principal']}Saliendo de JARVIS...{self.colores['reset']}")
                break
            except Exception as e:
                logger.error(f"Error en el bucle principal: {e}")
                print(f"{self.colores['error']}Error: {str(e)}{self.colores['reset']}")
                traceback.print_exc()


# Funci√≥n para ejecutar el chatbot
async def main():
    """Funci√≥n principal para ejecutar el chatbot."""
    chatbot = Chatbot()
    await chatbot.main_loop()


# Punto de entrada del programa
if __name__ == "__main__":
    asyncio.run(main())
